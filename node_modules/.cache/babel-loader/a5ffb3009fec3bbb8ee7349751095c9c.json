{"ast":null,"code":"/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs');\nconst path = require('path');\nfunction log(message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`);\n}\n\n// Parses src into an Object\nfunction parse(src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */{\n  const debug = Boolean(options && options.debug);\n  const obj = {};\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split('\\n').forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(/^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/);\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1];\n\n      // default undefined or missing values to empty string\n      let value = keyValueArr[2] || '';\n\n      // expand newlines in quoted values\n      const len = value ? value.length : 0;\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n');\n      }\n\n      // remove any surrounding quotes and extra spaces\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim();\n      obj[key] = value;\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`);\n    }\n  });\n  return obj;\n}\n\n// Populates process.env from .env file\nfunction config(options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */{\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding /*: string */ = 'utf8';\n  let debug = false;\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path;\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n    if (options.debug != null) {\n      debug = true;\n    }\n  }\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, {\n      encoding\n    }), {\n      debug\n    });\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key];\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`);\n      }\n    });\n    return {\n      parsed\n    };\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n}\nmodule.exports.config = config;\nmodule.exports.load = config;\nmodule.exports.parse = parse;","map":null,"metadata":{},"sourceType":"script"}